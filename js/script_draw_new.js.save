var count_machine_with_rt = 0;
var addr_rt = [];
var count_machine_with_pc = 0;
var addr_pc = [];

function create_canvas(){
	if(document.getElementById("myCanvas")){
		document.getElementById("myCanvas").parentNode.removeChild(document.getElementById("myCanvas"));
	}
	var canvas = document.createElement("canvas");
	canvas.className = "coorMyCanvas";
	canvas.id = "myCanvas";
	document.appendChild(canvas);
	return canvas;
}

function begin_draw2(){
        count_machine_with_rt = 0; addr_rt = [];
        count_machine_with_pc = 0; addr_pc = [];
	countOfMachine();

	var canvas = create_canvas();
	paper.setup(canvas);
	with(paper){
		draw_erorr_comp();		
		var circle_rt = new Path.Circle(new Point(420,450),250);
		
		var points_rt = draw_rt(circle_rt,count_machine_with_rt);
		var points_pc = draw_pc(450,points_rt);
		//var points_int = draw_inter(points_rt,points_pc);
		var lines = draw_lines(points_rt,points_pc);
		console.log(lines[2].x);
		//////////////////////////////////////////////////////////
		for(var ix in points_rt){
                        for(var iy in points_rt[ix].data.connect){
                                for(var iz in lines){
                                        if(points_rt[ix].data.connect[iy]["conn_net"] === lines[iz].name){
                                                points_rt[ix].addChild(lines[iz]);
                                        }
                                }
                        }
                }

                for(var ix in points_pc){
                        for(var iy in points_pc[ix].data.connect){
                                for(var iz in lines){
                                        if(points_pc[ix].data.connect[iy]["conn_net"] === lines[iz].name){
                                                points_pc[ix].addChild(lines[iz]);
                                        }
                                }
                        }
                }
		//////////////////////////////////////////////////////////
		circle_rt.remove();
		
		view.draw();
		
		var DDTool = new Tool();
		
		DDTool.onMouseMove = function(event){
                        deleteMenu3();
                        project.activeLayer.selected = false;
                        if(event.item){
                                event.item.selected = true;
                                //console.log(event.item.name);
                                createMenu3(event.item.name, event.item.data, event.point.x, event.point.y); //event.item.position.x, event.item.position.y);
                        }
                }
		
		DDTool.onMouseDown = function(event){
                        deleteMenu2();
                        project.activeLayer.selected = false;
                        if(event.item){
                                event.item.selected = true;
                                //console.log(event.item.name);
                                createMenu2(event.item.name, event.item.data);
                        }
                }

		DDTool.onMouseDrag = function(event){
			if(!(event.item.data.type === "line") && event.item){
				event.item.position = event.point;
				//for(var ix in event.item.children){
				//	if(event.item.position === event.item.children[ix].)				
				//}
			}
		}
	}
}
/*
function create_groups(rt,pc,lines){
	var groups = [];
	var countG = 0;
	with(paper){
		for(var ix in rt){
			groups[countG] = new Group();
			groups[countG].addChild(rt[ix]);
			for(var iy in rt[ix].data.connect){
				for(var iz in lines){
					if(rt[ix].data.connect[iy]["conn_net"] === lines[iz].name){
						groups[countG].addChild(lines[iz].clone());
					}
				}
			}
			++countG;
		}

		for(var ix in pc){
                	groups[countG] = new Group();
			groups[countG].addChild(pc[ix]);
                	for(var iy in pc[ix].data.connect){
                	        for(var iz in lines){
                	                if(pc[ix].data.connect[iy]["conn_net"] === lines[iz].name){
                	                        groups[countG].addChild(lines[iz].clone());
                	                }
                	        }
                	}
                	++countG;
        	}
	}

	return groups;
}
*/

function createMenu3(name,data,positionX,positionY){
	with(paper){
		var menu = document.createElement('div');
		menu.className = "divInfoMenu3";
		menu.id = "idMenu03";
		if(data.type === "line"){
			menu.innerHTML = "Interface net address: " + name + "<br>"+"Connected:<br>From: " + data.from + "<br>To: " + data.to;
			menu.style.left=positionX-140;
			menu.style.top=positionY+125;
			document.body.appendChild(menu);
			return;
		}
	menu.innerHTML = "Comp address: " + name + "<br>";
	for(var iy in data.connect)
	menu.innerHTML = menu.innerHTML+"Comp connect with computers: "+data.connect[iy]["conn_id"]+"<br>Comp connect using by interface: "+data.connect[iy]["conn_int"]+"<br>Comp include in interface's net: "+data.connect[iy]["conn_net"]+"<br>-------------------------<br>";
	menu.style.left=positionX-140;
	menu.style.top=positionY+125;
	document.body.appendChild(menu);
	}
}

function deleteMenu3(){
	if(document.getElementById("idMenu03"))
		document.getElementById("idMenu03").parentNode.removeChild(document.getElementById("idMenu03"));
}

function createMenu2(name, data){
   with(paper){
	var menu = document.createElement('div');
	menu.className = "divInfoMenu2";
	menu.id = "idMenu02";
	if(data.type === "line"){
		menu.innerHTML = "Interface net address: " + name + "<br>"+"Connected:<br>From: " + data.from + "<br>To: " + data.to;
		document.body.appendChild(menu);
		return;
	}
	menu.innerHTML = "Comp address: " + name + "<br>"; 
	for(var iy in data.connect){
		menu.innerHTML = menu.innerHTML+"Comp connect with computers: "+data.connect[iy]["conn_id"]+"<br>Comp connect using by interface: "+data.connect[iy]["conn_int"]+"<br>Comp include in interface's net: "+data.connect[iy]["conn_net"]+"<br>---------------------<br>";
	}
	document.body.appendChild(menu);
   }
}

function deleteMenu2(){
	if(document.getElementById("idMenu02")){
		document.getElementById("idMenu02").parentNode.removeChild(document.getElementById("idMenu02"));
	}
}


function draw_rt(circle, count_machine){
	var points = []; var count_rt = 0;
	with(paper){
		for(var iq = 0; iq < count_machine; ++iq){
			var offset = iq / count_machine * circle.length;

			var point = circle.getPointAt(offset);
		
			points[iq] = new Raster({
                                source: 'http://sotsbi.spb.ru:8161/qnet2/lib/icort.ico',
				position: point
                        });

			points[iq].name = addr_rt[iq];
			points[iq].data.type = "router";
			points[iq].data.connect = [];
			for(var ix in machine){
				if(points[iq].name === machine[ix]["addr"]){
					for(var iy in machine[ix]["comp"]){
						for(var iz in machine[ix]["comp"][iy]["connect"]){
							points[iq].data.connect[count_rt] = {};
							points[iq].data.connect[count_rt] = machine[ix]["comp"][iy]["connect"][iz];
							count_rt++;
						}
					}
				}
			}
		}
	}
	return points;
}



function draw_pc(coor_y, arr_points){
	var koof = (coor_y + 100) / coor_y;
	var points = []; var countP = 0; var count_size = 0;
	var count_large = 0;
	with(paper){
		for(var ix in machine){
			for(var iy in arr_points){
				if(machine[ix]["addr"] === arr_points[iy].name){
					for(var iz in machine[ix]["comp"]){
						for(var iq in machine[ix]["comp"][iz]["connect"]){
							for(var it in addr_pc){
								if(addr_pc[it] === machine[ix]["comp"][iz]["connect"][iq]["conn_id"]){
									if(arr_points[iy].position.y > coor_y){
										points[countP] = new Raster({
                                							source: 'http://sotsbi.spb.ru:8161/qnet2/lib/icopc.png',
                                							position: new Point(koof * arr_points[iy].position.x, koof * arr_points[iy].position.y)
                        							});
										points[countP].name = addr_pc[it];
										points[countP].data.type = "PC";
										points[countP].data.connect = [];
										for(var iw1 in machine){
										  if(machine[iw1]["addr"] === points[countP].name){
										    for(var iw2 in machine[iw1]["comp"]){
										      points[countP].data.connect = machine[iw1]["comp"][iw2]["connect"];
										    }
										  }
										}
										++countP; //++count_large
									}
									if(arr_points[iy].position.y < coor_y){
										points[countP] = new Raster({
                                                                                        source: 'http://sotsbi.spb.ru:8161/qnet2/lib/icopc.png',
                                                                                        position: new Point(koof * arr_points[iy].position.x, koof * arr_points[iy].position.y - 200)
                                                                                });
                                                                                points[countP].name = addr_pc[it];
										points[countP].data.type = "PC";
										points[countP].data.connect = [];
                                                                                for(var iw1 in machine){
                                                                                  if(machine[iw1]["addr"] === points[countP].name){
                                                                                    for(var iw2 in machine[iw1]["comp"]){
                                                                                      points[countP].data.connect = machine[iw1]["comp"][iw2]["connect"];
                                                                                    }
                                                                                  }
                                                                                }
                                                                                ++countP; //++count_large;
                                                                        }
								}
							}
						}
					}				
				}
			}
			++count_size;
		}
	}
	return points;
}

function draw_cloud(){
	var points = []; var countCl = 0;
	for(var ix in )
	
}

function draw_lines(rt_p,pc_p){
	var lines = []; var countL = 0;
	with(paper){
		for(var ix in rt_p){
			for(var iy in rt_p[ix].data.connect){
				for(var iz in rt_p){
					if(rt_p[ix].data.connect[iy]["conn_id"] === rt_p[iz].name){
						lines[countL] = new Path.Line(rt_p[ix].position,rt_p[iz].position);
						lines[countL].strokeColor = "black";
						lines[countL].name = rt_p[ix].data.connect[iy]["conn_net"];
						lines[countL].data.type = "line";
						lines[countL].data.from = rt_p[ix].name;
						lines[countL].data.to = rt_p[iz].name;
						for(var iq in lines){
							if(iq == countL) continue;
							if((lines[countL].data.from == lines[iq].data.to) && (lines[countL].data.to == lines[iq].data.from)){
								lines[countL].remove();
								lines.splice(countL,1);
								countL = countL - 1;
							}
						}
						++countL;
					}
				}
				for(var iz in pc_p){
                                        if(rt_p[ix].data.connect[iy]["conn_id"] === pc_p[iz].name){
                                                lines[countL] = new Path.Line(rt_p[ix].position,pc_p[iz].position);
                                                lines[countL].strokeColor = "black";
                                                lines[countL].name = rt_p[ix].data.connect[iy]["conn_net"];
                                                lines[countL].data.type = "line";
                                                lines[countL].data.from = rt_p[ix].name;
                                                lines[countL].data.to = pc_p[iz].name;
                                                for(var iq in lines){
                                                        if(iq == countL) continue;
                                                        if((lines[countL].data.from == lines[iq].data.to) && (lines[countL].data.to == lines[iq].data.from)){
                                                                lines[countL].remove();
                                                                lines.splice(countL,1);
                                                                countL = countL - 1;
                                                        }
                                                }
                                                ++countL;
                                        }
                                }
			}
		}
	}
	return lines;
}

/*
function draw_inter(rt_p, pc_p){
	var inter = []; var countI = 0;
	
	with(paper){
		var countRt = 0;
		var countPc = 0;
	while(countRt != rt_p.length && countPc != pc_p.length){
		for(var ix in rt_p){
			for(var iy in rt_p[ix].data.connect){
				if((ix === countRt) === false){
					for(var iz in rt_p[countRt].data.connect){
						if(rt_p[countRt].data.connect[iz]["conn_net"] === rt_p[ix].data.connect[iy]["conn_net"]){
							inter[countI] = solve_coor_inter(rt_p[countRt],rt_p[ix]);
							inter[countI].name = rt_p[countRt].data.connect[iz]["conn_int"];
							++countI;
						}
					}
					iz = 0;
				}
				for(var iz in pc_p[countPc].data.connect){
					if(pc_p[countPc].data.connect[ix]["conn_net"] === rt_p[ix].data.connect[iy]["conn_net"]){
						inter[countI] = solve_coor_inter(pc_p[countPc],rt_p[ix]);
						inter[countI].name = pc_p[countPc].data.connect[iz]["conn_int"];
						++countI;
					}
					iz = 0;
				}
			}
		}
		++countRt; ++countPc;
	}
	countRt = 0; countPc = 0;
	while(countPc != pc_p.length && countRt != rt_p.length){	
		for(var ix in rt_p){
                        for(var iy in rt_p[ix].data.connect){
                                for(var iz in pc_p[countPc].data.connect){
                                        if(pc_p[countPc].data.connect[ix]["conn_net"] === rt_p[ix].data.connect[iy]["conn_net"]){
                                                inter[countI] = solve_coor_inter(pc_p[countPc],rt_p[ix]);
                                                inter[countI].name = pc_p[countPc].data.connect[iz]["conn_int"];
                                                ++countI;
                                        }
                                        iz = 0;
                                }
                        }
		}
		++countRt; ++countPc;
	}
	return inter;
}
*/

function solve_coor_inter(comp1, comp2){
	with(paper){
		var obj_comp1 = JSON.stringify(comp1.position);
		var obj_comp2 = JSON.stringify(comp2.position);
		obj_comp1 = obj_comp1.replace('[', '');		
		obj_comp1 = obj_comp1.replace(']', '');
		obj_comp1 = obj_comp1.replace('"Point",', '');
		obj_comp2 = obj_comp2.replace('[', '');
                obj_comp2 = obj_comp2.replace(']', '');
                obj_comp2 = obj_comp2.replace('"Point",', '');
		obj_comp1 = obj_comp1.split(",");		
		obj_comp2 = obj_comp2.split(",");

		var point = new Point(0,0);
		point.x = obj_comp1[0];
		point.y = obj_comp2[1];
		//console.log(point.position);


		var lengthA = obj_comp2[1] - obj_comp1[1];
		if(lengthA<0) lengthA = lengthA * (-1);
		var lengthB = obj_comp1[0] - obj_comp2[0];
		if(lengthB<0) lengthB = lengthB * (-1);
		var lengthC = Math.sqrt(lengthA*lengthA + lengthB*lengthB);
		var Alph = Math.acos((lengthA*lengthA + lengthB*lengthB - lengthC*lengthC)/(2*lengthA*lengthB));

		var new_x = obj_comp1[0] + comp1.width/2 * Math.cos(Alph);
		var new_y = obj_comp1[1] + comp1.width/2 * Math.sin(Alph);
		
		var new_point = new Point(0,0);
		new_point.x = new_x;
                new_point.y = new_y;
		//console.log(point.position);

		var circle = new Path.Circle({
			point: new_point,
			radius: 5,
			fillColor: "blue"
		})
		
		//console.log(circle);
	}
	return circle;
}

function draw_erorr_comp(){
	with(paper){
		var count = 0;
		var cor_x = 30;
		for(var ix in machine){
			for(var iy in machine[ix]["comp"]){
				for(var iz in machine[ix]["comp"][iy]["connect"]){
					++count;
				}
			}
			if(count <= 0){
				if (machine[ix]["type"] === "pc"){
                        		var ico = new Raster({
                                		source: 'http://sotsbi.spb.ru:8161/qnet2/lib/icopcred.ico',
                                		position: new Point(cor_x,870),
						color: "red"
                        		});
					for(var it in addr_rt){
	                                        if(addr_rt[it] === machine[ix]["addr"]){
        	                                        addr_rt.splice(it,1);
                	                        }
                	                }
					cor_x = cor_x+50;
					ico.name = machine[ix]["addr"];
                                	addr_rt.sort();
                        	}
                        	if (machine[ix]["type"] === "rt"){
                        		var ico = new Raster({
                                		source: 'http://sotsbi.spb.ru:8161/qnet2/lib/icortred.ico',
                                		position: new Point(cor_x,870),
						color: "red"
                        		});
					for(var it in addr_rt){
                                       		if(addr_rt[it] === machine[ix]["addr"]){
                                               		addr_rt.splice(it,1);
                                       		}
                               		}
					cor_x = cor_x+50;
					count_machine_with_rt = count_machine_with_rt - 1;
					ico.name = machine[ix]["addr"];
                                	addr_rt.sort();
                        	}
			}
			count = 0;
		}
	}
}

function countOfMachine(){
	for(var ix in machine){
		if(machine[ix]["type"] == "rt"){
			++count_machine_with_rt;
			addr_rt[count_machine_with_rt] = machine[ix]["addr"];
		} else if(machine[ix]["type"] == "pc"){
                        ++count_machine_with_pc;
                        addr_pc[count_machine_with_pc] = machine[ix]["addr"];
                }
	}
} 
